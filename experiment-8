
K-Means algorithm on two different datasets
In [1]:
import numpy as np 
import pandas as pd 
from matplotlib import pyplot as plt
Iris Dataset
In [2]:
data = pd.read_csv('Iris.csv')
In [3]:
x1 = data.iloc[:, [1, 2, 3, 4]].values
Model
In [4]:
from sklearn.cluster import KMeans

km = KMeans(n_clusters=4, init='random',n_init=30, max_iter=300, tol=1e-04, random_state=42)
y1 = km.fit_predict(x1)
New points introduced to check k-means Model
In [5]:
plt.scatter(
    x1[y1 == 0, 0], x1[y1 == 0, 1],
    s=50, c='lightgreen',
    marker='s', edgecolor='black',
    label='cluster 1'
)
plt.scatter(
    x1[y1 == 1, 0], x1[y1 == 1, 1],
    s=50, c='orange',
    marker='o', edgecolor='black',
    label='cluster 2'
)
plt.scatter(
    x1[y1 == 2, 0], x1[y1 == 2, 1],
    s=50, c='lightblue',
    marker='v', edgecolor='black',
    label='cluster 3'
)


# plot the centroids
plt.scatter(
    km.cluster_centers_[:, 0], km.cluster_centers_[:, 1],
    s=250, marker='*',
    c='red', edgecolor='black',
    label='centroids'
)
plt.legend(scatterpoints=1)
plt.grid()
plt.show()

In [6]:
# calculate distortion for a range of number of cluster
distortions = []
for i in range(1, 11):
    km = KMeans(
        n_clusters=i, init='random',
        n_init=10, max_iter=300,
        tol=1e-04, random_state=0
    )
    km.fit(x1)
    distortions.append(km.inertia_)

# plot
plt.plot(range(1, 11), distortions, marker='o')
plt.xlabel('Number of clusters')
plt.ylabel('Distortion')
plt.show()

Wine Dataset
In [7]:
data = pd.read_csv('wine.csv')
In [8]:
x2 = data.iloc[:, [1, 2, 3, 4]].values
In [9]:
from sklearn.cluster import KMeans

km = KMeans(n_clusters=3, init='random',n_init=20, max_iter=400, tol=1e-04, random_state=4)
y2 = km.fit_predict(x2)
In [10]:
plt.scatter(
    x2[y2 == 0, 0], x2[y2 == 0, 1],
    s=50, c='lightgreen',
    marker='s', edgecolor='black',
    label='cluster 1'
)
plt.scatter(
    x2[y2 == 1, 0], x2[y2 == 1, 1],
    s=50, c='orange',
    marker='o', edgecolor='black',
    label='cluster 2'
)
plt.scatter(
    x2[y2 == 2, 0], x2[y2 == 2, 1],
    s=50, c='lightblue',
    marker='v', edgecolor='black',
    label='cluster 3'
)


# plot the centroids
plt.scatter(
    km.cluster_centers_[:, 0], km.cluster_centers_[:, 1],
    s=250, marker='*',
    c='red', edgecolor='black',
    label='centroids'
)

plt.legend(scatterpoints=1)
plt.grid()
plt.show()

In [11]:
# calculate distortion for a range of number of cluster
distortions = []
for i in range(1, 11):
    km = KMeans(
        n_clusters=i, init='random',
        n_init=10, max_iter=300,
        tol=1e-04, random_state=0
    )
    km.fit(x2)
    distortions.append(km.inertia_)

# plot
plt.plot(range(1, 11), distortions, marker='o')
plt.xlabel('Number of clusters')
plt.ylabel('Distortion')
plt.show()

END
